
##
#
# Welcome to the cmake lists file, this controls how nekohook will build for your system
#
##

cmake_minimum_required (VERSION 2.6)
project (libnekohook)


##
# User options
##

set(CGAME tf2 CACHE STRING "Game to build with")
set(CUSERNAME UNREGISTERED CACHE STRING "Register a username")
set(CUSERID 0 CACHE STRING "Register a id")
set(CForceClang false CACHE STRING "Should cmake force compilation with clang?")
set(CMAKE_BUILD_TYPE RELEASE CACHE STRING "Obvious")

# TODO strip symbols

##
# Functions
##

# Easy log
Function(Log in_string)
  Message(STATUS ${in_string})
endfunction()

# Function to remove source files from a directory, ripped from aimtux fuzion <3
Function(RemoveSourceFiles files_to_remove)
  foreach(i ${source_files})
    if("${i}" MATCHES "(.*)${files_to_remove}(.*)") # Check if the item matches the directory name in _excludeDirName
      list(REMOVE_ITEM source_files ${i}) # Remove the item from the list
    endif()
  endforeach()
endfunction()

# Use to add files instead of remove
Function(AddSourceFiles files_to_add)
  File(GLOB_RECURSE tmp "${files_to_add}")
  List(APPEND source_files ${tmp})
endfunction()

# Changes compiler arguments to be in the native format for the compiler
#Function(NativeCompilerArgs in_stringa)



# Use if your module depends or is in the base
Function(AddBase base_name files)
  #string(TOUPPER INTERNAL_${base_name})
  add_definitions("-DNEKO${base_name}_=1")
endfunction()

# Use if your module depends on a base
Function(ModuleUsesBase module_name base_name)
  if(CGAME STREQUAL name)
    add_definitions("-DNEKO${base_name}_=1")
  endif()
endfunction()

# A function to easily add a module
Function(AddModule module_name)
  if(CGAME STREQUAL name)
    add_definitions("-DNEKO${module_name}_=1")
  endif()
endfunction()



# For use in static builds
#Function(WriteHeader path)
  #file(WRITE ${path})
#endfunction

# Add cathooks source files except the modules, we add those selectivly
File(GLOB_RECURSE source_files "${CMAKE_SOURCE_DIR}/src/*.c*")
RemoveSourceFiles("${CMAKE_SOURCE_DIR}/src/modules/*.*")

# Flags we use for every build type
set(CMAKE_CXX_STANDARD 17)
set(CCOMMON_FLAGS "")

## Game modules
Log("Game module: ${CGAME}")
# Team Fortress game module
if(CGAME STREQUAL "tf2")
	add_definitions("-DCATHOOK_TF2=1")
	set(CBASE "SOURCE_2013_SDK")
# Fistful of Frags game module
elseif(CGAME STREQUAL "fof")
	add_definitions("-DCATHOOK_FOF=1")
	set(CBASE "SOURCE_2013_SDK")
elseif(CGAME STREQUAL "csgo")
	add_definitions("-DCATHOOK_CSGO=1")
  AddSourceFiles("${CMAKE_SOURCE_DIR}/src/modules/csgo/*.c*")
endif()

## Graphics modules
message(STATUS "Graphics module: ${CGFX}")
# Valve surface
if(CGFX STREQUAL "valve_surface")
	add_definitions("-DCATHOOK_GFX_SURFACE=1")
elseif(CGFX STREQUAL "gl_draw")
  add_definitions("-DCATHOOK_GFX_GL=1")
  list(APPEND source_files "src/modules/gl_draw/gl_draw.cpp")
endif()

## Input modules
message(STATUS "Input module: ${CINP}")
# Valve surface
if(CINP STREQUAL "xlib")
	add_definitions("-DCATHOOK_INP_XLIB=1")
  list(APPEND source_files "${CMAKE_SOURCE_DIR}/src/modules/xlib/input.cpp")
  set(USE_XLIB true)
endif()

## SDK/Bases if needed
# The source sdk that everyone loves
if(CBASE STREQUAL "SOURCE_2013_SDK")
	set(CCOMMON_FLAGS "${CCOMMON_FLAGS} -m32")
  add_definitions(-DCATHOOK_SOURCE_2013=1)
  AddSourceFiles("${CMAKE_SOURCE_DIR}/src/modules/source2013/*.c*")
endif()

# If anything uses xlib, we need the main file
if(USE_XLIB)
  list(APPEND source_files "${CMAKE_SOURCE_DIR}/src/modules/xlib/xlib.cpp")
endif()

# Set git hash and date if possible
find_package(Git)
if(GIT_FOUND)
	execute_process(
	  COMMAND git log -1 --pretty="%h"
	  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
	  OUTPUT_VARIABLE GIT_COMMIT_HASH
	  OUTPUT_STRIP_TRAILING_WHITESPACE
	)
	add_definitions("-DGIT_COMMIT_HASH=${GIT_COMMIT_HASH}")
	execute_process(
	  COMMAND git log -1 --pretty="%ai"
	  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
	  OUTPUT_VARIABLE GIT_COMMIT_DATE
	  OUTPUT_STRIP_TRAILING_WHITESPACE
	)
	add_definitions("-DGIT_COMMIT_DATE=${GIT_COMMIT_DATE}")
endif()


# Default compiler flags
set(CMAKE_CXX_FLAGS_DEBUG "${CCOMMON_FLAGS} -g3 -ggdb -Wall")
set(CMAKE_CXX_FLAGS_RELEASE "${CCOMMON_FLAGS} -mtune=generic -O3")
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "Flags: ${CMAKE_CXX_FLAGS_RELEASE}")

#include_directories(${INCLUDE_DIRS})
add_library(nekohook SHARED ${source_files})

target_link_libraries(nekohook c stdc++)
