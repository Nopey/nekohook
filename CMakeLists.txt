#
#
# Welcome to the cmake lists file, this controls how nekohook will build for your system
#
# TODO, make wasy way to do "touch ../src/CMakeLists.txt" to make things easy
#
#

cmake_minimum_required (VERSION 2.6)
project (libnekohook)
# Allows us to use cmake/FindSDL2.cmake
set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)


## Defaults
# User options can be set with cmake -D"NAME OF OPTION HERE"="VARIABLE", e.g. "cmake -DCGAME=csgo"
set(CGAME tf2 CACHE STRING "Game to build with")
set(CGFX valve_surface CACHE STRING "Graphics module to use")
set(CUSEDUMBSTRING false CACHE BOOL "Use Dummy string gfx?")
set(CINP xlib CACHE STRING "Input module to use")
set(CUSERNAME UNREGISTERED CACHE STRING "Register a username")
set(CUSERID 0 CACHE STRING "Register a id")
set(CForceClang false CACHE STRING "Should cmake force compilation with cmake?")
if(NOT CMAKE_BUILD_TYPE)
    message(STATUS "No build type selected, default to Release")
    set(CMAKE_BUILD_TYPE RELEASE)
endif(NOT CMAKE_BUILD_TYPE)

# Function to remove source files from a directory, ripped from aimtux fuzion <3
FUNCTION(EXCLUDE_FILES_FROM_DIR_IN_LIST _InFileList _excludeDirName)
  foreach(ITR ${_InFileList})
    if("${ITR}" MATCHES "(.*)${_excludeDirName}(.*)") # Check if the item matches the directory name in _excludeDirName
      if(CMAKE_BUILD_TYPE MATCHES DEBUG)
        message(STATUS "Remove Item from List:${ITR}")
      endif()
      list(REMOVE_ITEM _InFileList ${ITR}) # Remove the item from the list
    endif()
  endforeach()
  set(SOURCE_FILES ${_InFileList} PARENT_SCOPE) # Return the SOURCE_FILES variable to the calling parent
ENDFUNCTION()

# Function to create a C++ resource file from files in given directory
function(create_resources dir output)
    # Create empty output files
    file(WRITE ${output}.cpp "// Auto Generated by CMAKE\n#include \"${output}.hpp\"\n")
    file(WRITE ${output}.hpp "#pragma once\n#include <string>\n#include <map>\n// Auto Generated by CMAKE\n")

		# Collect input files
    file(GLOB bins ${dir}/*)
    # Iterate through input files
    foreach(bin ${bins})
        # Get short filename
        string(REGEX MATCH "([^/]+)$" filename ${bin})
        # Replace filename spaces & extension separator for C compatibility
        string(REGEX REPLACE "\\.| |-" "_" filename ${filename})
        # Read hex data from file
        file(READ ${bin} filedata HEX)
        # Convert hex data for C compatibility
        string(REGEX REPLACE "([0-9a-f][0-9a-f])" "0x\\1," filedata ${filedata})
				# Append data to output file
				#file(APPEND ${output}.cpp "const std::basic_string<unsigned char> ${filename} = {${filedata}0x00};\n")
				#file(APPEND ${output}.hpp "extern const std::basic_string<unsigned char> ${filename};\n")
        #file(APPEND ${output}.cpp "const unsigned char ${filename}[] = {${filedata}0x00};\nconst unsigned ${filename}_size = sizeof(${filename});\n")
				file(APPEND ${output}.cpp "const std::basic_string<unsigned char> ${filename} = {${filedata}0x00};\n")
				file(APPEND ${output}.hpp "extern const std::basic_string<unsigned char> ${filename};\n")
				#file(APPEND ${output}.hpp "extern const unsigned char ${filename}[];\nextern const unsigned ${filename}_size;\n")
		endforeach()

		#Begin Fonts section
		file(APPEND ${output}.cpp "// Fonts Section Begin\nconst std::map<std::string,const std::basic_string<unsigned char>*> font_map = {\n")
		file(APPEND ${output}.hpp "// Fonts Section Begin\nextern const std::map<std::string,const std::basic_string<unsigned char>*> font_map;\n")
		#file(APPEND ${output}.cpp "// Fonts Section Begin\nconst std::map<std::string, std::basic_string<unsigned char>*> font_map = {\n")
		#file(APPEND ${output}.hpp "// Fonts Section Begin\nextern const std::map<std::string, std::basic_string<unsigned char>*> font_map;\n")
		# Collect Fonts
    file(GLOB fonts ${dir}/*.ttf)
    # Iterate through fonts
    foreach(font ${fonts})
        # Get short filename
        string(REGEX MATCH "([^/]+)$" shortfilename ${font})
        # Replace filename spaces & extension separator for C compatibility
        string(REGEX REPLACE "\\.| |-" "_" filename ${shortfilename})
        # Append data to output file
				#file(APPEND ${output}.cpp "\t{\"${filename}\",  &${filename}_size, &${filename}},\n")
				file(APPEND ${output}.cpp "\t{\"${shortfilename}\", &${filename}},\n")
    endforeach()
    file(APPEND ${output}.cpp "};\n")
endfunction()

#Function to shuffle a list
function(shuffle_list deck out)
	set(markeddeck "")
	foreach(card ${deck})
		string(RANDOM LENGTH 6 ALPHABET "0123456789ABCDEF" mark)
		string(CONCAT markedcard ${mark} ${card})
		list(APPEND markeddeck ${markedcard})
	endforeach()
	list(SORT markeddeck)
	set(deck "")
	foreach(markedcard ${markeddeck})
		string(SUBSTRING ${markedcard} 6 -1 card)
		list(APPEND deck ${card})
	endforeach()
set(${out} ${deck} PARENT_SCOPE)
endfunction()


# Add cathooks source files except the modules, we add those selectivly
file(GLOB_RECURSE SOURCE_FILES "${CMAKE_SOURCE_DIR}/src/*.c*")
EXCLUDE_FILES_FROM_DIR_IN_LIST("${SOURCE_FILES}" "${CMAKE_SOURCE_DIR}/src/modules/")
#these source files will be compiled & linked first, therefor their globals init'd first.
set(EARLY_SOURCE_FILES "${CMAKE_SOURCE_DIR}/src/util/catvars.cpp" "${CMAKE_SOURCE_DIR}/src/util/logging.cpp" "${CMAKE_SOURCE_DIR}/src/framework/console.cpp")

# Flags we use for every build type
set(CCOMMON_FLAGS "-std=gnu++17 -mtune=generic -O3")

## Game modules
message(STATUS "Game module: ${CGAME}")
# Team Fortress game module
if(CGAME STREQUAL "tf2")
	add_definitions("-DCATHOOK_TF2=1")
	set(CBASE "SOURCE_2013_SDK")
# Fistful of Frags game module
elseif(CGAME STREQUAL "fof")
	add_definitions("-DCATHOOK_FOF=1")
	set(CBASE "SOURCE_2013_SDK")
elseif(CGAME STREQUAL "csgo")
	add_definitions("-DCATHOOK_CSGO=1")
  file(GLOB_RECURSE TMP_SOURCES "${CMAKE_SOURCE_DIR}/src/modules/csgo/*.c*")
	list(APPEND SOURCE_FILES ${TMP_SOURCES})
endif()

## Graphics modules
message(STATUS "Graphics module: ${CGFX}")
# Valve surface
if(CGFX STREQUAL "valve_surface")
	add_definitions("-DCATHOOK_GFX_SURFACE=1")
elseif(CGFX STREQUAL "gl_draw")
  add_definitions("-DCATHOOK_GFX_GL=1")
	list(APPEND SOURCE_FILES "src/modules/gl_draw/gl_draw.cpp")
	add_subdirectory(src/modules/gl_draw/libglez/)
	include_directories(SYSTEM src/modules/gl_draw/libglez/include)
	#I don't remember why rdynamic is needed
	add_compile_options(-rdynamic)
	list(APPEND LINK_LIBRARIES glez)
endif()

## Dumb String
if(CUSEDUMBSTRING)
	add_definitions("-DCATHOOK_DUMB_STRING=1")
	list(APPEND SOURCE_FILES "src/modules/dumb_string/dumb_string.cpp")
endif()

## Input modules
message(STATUS "Input module: ${CINP}")
# Valve surface
if(CINP STREQUAL "xlib")
	add_definitions("-DCATHOOK_INP_XLIB=1")
  list(APPEND SOURCE_FILES "${CMAKE_SOURCE_DIR}/src/modules/xlib/input.cpp")
  set(USE_XLIB true)
endif()

## SDK/Bases if needed
# The source sdk that everyone loves
if(CBASE STREQUAL "SOURCE_2013_SDK")
	set(CCOMMON_FLAGS "${CCOMMON_FLAGS} -m32")
  add_definitions(-DCATHOOK_SOURCE_2013=1)
  file(GLOB_RECURSE TMP_SOURCES "${CMAKE_SOURCE_DIR}/src/modules/Source_2013/*.c*")
  list(APPEND SOURCE_FILES ${TMP_SOURCES}) # add our source sdk files
  set(SSDK_DIR "${CMAKE_SOURCE_DIR}/src/modules/Source_2013/sdk/mp/src")
	if(EXISTS ${SSDK_DIR})
		message(STATUS "Careful now, You're using Nopey's FOSS knockoff SSDK, and if you don't know what those acronyms mean, this isn't for you..")
		add_definitions(-DCATHOOK_SOURCE_2013=1 -DUSE_SDL=1 -D_GLIBCXX_USE_CXX11_ABI=0 -D_POSIX=1 -DRAD_TELEMETRY_DISABLED=1 -DLINUX=1 -D_LINUX=1 -DPOSIX=1 -DGNUC=1 -DNO_MALLOC_OVERRIDE=1)
		include_directories(SYSTEM ${SSDK_DIR} ${SSDK_DIR}/common ${SSDK_DIR}/public ${SSDK_DIR}/public/mathlib ${SSDK_DIR}/public/tier0 ${SSDK_DIR}/public/tier1 ${SSDK_DIR}/game/shared ${SSDK_DIR}/game/server)
		# TODO: Find TF2 SDL2
		list(APPEND LINK_LIBRARIES $ENV{HOME}/.steam/steam/steamapps/common/Team\ Fortress\ 2/bin/libSDL2-2.0.so.0)
		message(${SDL2_INCLUDE_DIR})
		include_directories(SYSTEM ${SDL2_INCLUDE_DIR})
  endif()

endif()

# If anything uses xlib, we need the main file
if(USE_XLIB)
  list(APPEND SOURCE_FILES "${CMAKE_SOURCE_DIR}/src/modules/xlib/xlib.cpp")
endif()

# Debug info
if (CMAKE_BUILD_TYPE MATCHES DEBUG)
  foreach (ITR ${SOURCE_FILES})
    message(STATUS "Building with:${ITR}")
  endforeach()
endif()

# Set git hash and date if possible
find_package(Git)
if(GIT_FOUND)
	execute_process(
	  COMMAND git log -1 --pretty="%h"
	  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
	  OUTPUT_VARIABLE GIT_COMMIT_HASH
	  OUTPUT_STRIP_TRAILING_WHITESPACE
	)
	add_definitions("-DGIT_COMMIT_HASH=${GIT_COMMIT_HASH}")
	execute_process(
	  COMMAND git log -1 --pretty="%ai"
	  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
	  OUTPUT_VARIABLE GIT_COMMIT_DATE
	  OUTPUT_STRIP_TRAILING_WHITESPACE
	)
	add_definitions("-DGIT_COMMIT_DATE=${GIT_COMMIT_DATE}")
endif()

#Embed fonts and other junk in the library
create_resources(embed embed)
list(APPEND SOURCE_FILES embed.cpp)
include_directories(SYSTEM .)

#Shuffle Source files
if(${CMAKE_BUILD_TYPE} STREQUAL Release)
 shuffle_list("${SOURCE_FILES}" SOURCE_FILES)
endif()

# Default compiler flags
set(CMAKE_CXX_FLAGS_DEBUG "${CCOMMON_FLAGS} -g3 -ggdb")
set(CMAKE_CXX_FLAGS_RELEASE "${CCOMMON_FLAGS}")
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "Flags: ${CMAKE_CXX_FLAGS_RELEASE}")

#Some files need to init first
foreach(item ${EARLY_SOURCE_FILES})
 list(REMOVE_ITEM SOURCE_FILES ${item})
endforeach()

#include_directories(${INCLUDE_DIRS})
add_library(nekohook SHARED ${EARLY_SOURCE_FILES} ${SOURCE_FILES})

target_link_libraries(nekohook c stdc++ ${LINK_LIBRARIES})
